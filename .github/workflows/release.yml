name: RELEASE
on:
  push:
    tags: 
      - "v*.*.*"
jobs:
  build_android:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      repository-projects: write

    steps:
      - uses: actions/setup-java@v4
        with:
          distribution: 'oracle'
          java-version: '17'
      - name: Cloing repository
        uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.24.1
      - run: flutter pub get
      - run: flutter build apk
      - run: mv build/app/outputs/flutter-apk/app-release.apk build/app/outputs/flutter-apk/Dantotsu_Android_${{github.ref_name}}.apk
      - name: Android Apk Release
        uses: softprops/action-gh-release@master
        with:
            files: build/app/outputs/flutter-apk/Dantotsu_Android_${{github.ref_name}}.apk
  build_windows:
    runs-on: windows-latest
    permissions: 
        contents: write
        pull-requests: write
        repository-projects: write
    steps:
      - name: Cloing repository
        uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.24.1
      - run: flutter pub get
      - run: flutter build windows
      - name: Archive App
        uses: thedoctor0/zip-release@master
        with:
          type: 'zip'
          filename: Dantotsu_Windows_${{github.ref_name}}.zip
          directory: build\windows\x64\runner\Release
      - run: ls build\windows\x64\runner\Release
      - name: Release Windows Zip
        uses: softprops/action-gh-release@master
        with:
            files: build/windows/x64/runner/Release/Dantotsu_Windows_${{github.ref_name}}.zip
        
    
  build_linux:
    runs-on: ubuntu-latest
    permissions: 
        contents: write
        pull-requests: write
        repository-projects: write
    steps:
      - name: Cloing repository
        uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.24.1
      - run: |
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev
      - run: flutter pub get
      - run: flutter build linux
      - name: Archive app
        uses: thedoctor0/zip-release@master
        with:
            type: 'zip'
            filename: Dantotsu_Linux_${{github.ref_name}}.zip
            directory: build/linux/x64/release/bundle
      - name: Release Linux Zip
        uses: softprops/action-gh-release@master
        with:
            files: build/linux/x64/release/bundle/Dantotsu_Linux_${{github.ref_name}}.zip
  build_ios_and_macos:
    runs-on: macos-latest
    permissions: 
        contents: write
        pull-requests: write
        repository-projects: write
    steps:
      - name: Cloing repository
        uses: actions/checkout@v4
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: 3.24.1
      - run: flutter pub get
      - run: flutter build ios --release --no-codesign
      - name: Release ios App
        uses: softprops/action-gh-release@master
        with:
            files: build/ios/iphoneos/Runner.app
      - run: flutter build macos
      - name: Archive App
        uses: thedoctor0/zip-release@master
        with:
            type: 'zip'
            filename: Dantotsu_MacOS_${{github.ref_name}}.zip
            directory: build/macos/Build/Products/Release
      - name: Release MacOS Zip
        uses: softprops/action-gh-release@master
        with:
            files: build/macos/Build/Products/Release/Dantotsu_MacOS_${{github.ref_name}}.zip
  upload_download_url:
    runs-on: ubuntu-latest
    needs: [build_android,build_windows,build_linux,build_ios_and_macos]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: |
          sudo apt-key adv --keyserver keyserver.ubuntu.com --recv-key C99B11DEB97541F0
          curl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null
          sudo apt update
          sudo apt install gh -y

      - name: Authenticate GitHub CLI
        run: echo "${{secrets.FINE_GRAIN_TOKEN}}" | gh auth login --with-token

      - name: Fetch latest release assets with gh
        id: fetch_assets
        run: |
          gh release view --repo ${{github.repository}} ${{github.ref_name}} --json assets --jq '.assets[].url' > asset_links.txt

      - name: Print fetched List
        run: cat asset_links.txt

      - name: Read, sort, and format links from the file
        id: format_links
        run: |
          # Read links from the file
          LINKS=$(cat asset_links.txt | sort)
          
          # Initialize the message
          MESSAGE="**Dantotsu ${{github.ref_name}} Downloads:**\n\n"
          
          # Loop through each link and format them
          while IFS= read -r LINK; do
            if [[ $LINK == *"Android"* ]]; then
              MESSAGE+="• [Android]($LINK)\n"
            elif [[ $LINK == *"IOS"* ]]; then
              MESSAGE+="• [iOS]($LINK)\n"
            elif [[ $LINK == *"Linux"* ]]; then
              MESSAGE+="• [Linux]($LINK)\n"
            elif [[ $LINK == *"MacOS"* ]]; then
              MESSAGE+="• [macOS]($LINK)\n"
            elif [[ $LINK == *"Windows"* ]]; then
              MESSAGE+="• [Windows]($LINK)\n"
            fi
          done <<< "$LINKS"

          # Save the message to an environment variable
          echo "MESSAGE=$MESSAGE" >> $GITHUB_ENV
      - name: Send message to Discord
        env:
          DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
          MESSAGE: ${{ env.MESSAGE }}
        run: |
          # Send the message to Discord using the webhook
          curl -H "Content-Type: application/json" \
            -X POST \
            -d "{\"content\": \"$MESSAGE\"}" \
            $DISCORD_WEBHOOK_URL
          